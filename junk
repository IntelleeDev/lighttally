<div class="c-item-box">
      <span ion-text color="text-color">Replacement Bulb</span>
      <ion-input 
        value=""
        ngClass="trans" 
        [(ngModel)]="replacementBulb" 
        placeholder="Enter replacementBulb">
      </ion-input>
    </div>


<div class="time-box">
          <div>
            <span ion-text color="text-color">From</span>
            <ion-item ngClass="blank" no-lines>
              <ion-datetime ngClass="trans" displayFormat="HH:mm" [(ngModel)]="fromHour"></ion-datetime>
            </ion-item>
          </div>
          <div>
            <span ion-text color="text-color">To</span>
            <ion-item ngClass="blank" no-lines>
              <ion-datetime ngClass="trans" displayFormat="HH:mm" [(ngModel)]="toHour"></ion-datetime>
            </ion-item>
          </div>
        </div>

        <ion-item ngClass="blank" no-lines>
          <ion-select ngClass="trans" [(ngModel)]="workingHours" full placeholder="Select working hours">
            <ion-option *ngFor="let hour of hours" value="hour">{{ hour }}</ion-option>
          </ion-select>
        </ion-item>


        selectBulb(bulb.category + ' ' + t.name)




        <!-- Wrong Bulb
    <div class="c-item-box">
      <span ion-text color="text-color">Wrong Bulb</span>
      <ion-list radio-group formControlName="wrongBulb">
        <ion-grid no-padding>
          <ion-row>
            <ion-col col-5>
              <ion-item ngClass="trans fs-12" no-lines>
                <ion-label>YES</ion-label>
                <ion-radio value="true"></ion-radio>
              </ion-item>
            </ion-col>
            <ion-col col-1><div></div></ion-col>
            <ion-col col-5>
              <ion-item ngClass="trans fs-12" no-lines>
                <ion-label>NO</ion-label>
                <ion-radio value="false"></ion-radio>
              </ion-item>
            </ion-col>
          </ion-row>
        </ion-grid>
      </ion-list>
    </div> -->


    /^(\([0-9]{3}\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/
    C:\Users\lami\algs4\bin;C:\Users\lami\algs4\java\bin;




    const firestore = this.angularFirestore.firestore;
    const batch = firestore.batch();

    const evalId = this.angularFirestore.createId();
    const evalRef = firestore.collection('evaluations').doc(evalId);
    const evaluation: Evaluation = {
      timestamp: new Date(),
      locationId: '',
      userId: '',
      id: evalId
    };
    batch.set(evalRef, evaluation);

    const evaluations: Array<any> = this.cache.getItem('evaluation');
    evaluations.forEach(value => {
      const room: Room = value.room;
      const roomId = this.angularFirestore.createId();
      const roomRef = firestore.collection('rooms').doc(roomId);
      batch.set(roomRef, { id: roomId, ...room, evaluationId: evalId });

      const fixtures: Array<Fixture> = value.fixtures;
      fixtures.forEach((fixture: Fixture) => {
        const fixId = this.angularFirestore.createId();
        const fixRef = firestore.collection('fixtures').doc(fixId);
        batch.set(fixRef, { id: fixId, ...fixture, roomId: roomId });
        
        const replacements: Array<Replacement> = value.replacements;
        replacements.forEach((replacement: Replacement) => {
          const repId = this.angularFirestore.createId();
          const repRef = firestore.collection('replacements').doc(repId);
          batch.set(repRef, { id: repId, ...replacement, fixtureId: fixId });
        });
      });

    });

    batch.commit()
         .then(() => {
            this.createToast('Evaluation successful');
            setTimeout(() => {
              modal.dismiss();
              this.navCtrl.popToRoot();
            }, 2000); 
          })
         .catch(error => {
           this.createToast(error);
         });

    